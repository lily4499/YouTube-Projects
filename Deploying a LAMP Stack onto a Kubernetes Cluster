Deploying a LAMP Stack onto a Kubernetes Cluster

Introduction
In this tutorial, we will deploy a LAMP stack (Linux, Apache, MySQL, PHP) onto a Kubernetes cluster. 
This step-by-step guide is designed for DevOps engineers, Kubernetes enthusiasts, or anyone looking to containerize and deploy traditional applications in a cloud-native environment.
Project Overview
The LAMP stack is a popular open-source solution stack used primarily for web development. Here's what each component does:
Linux: Provides the operating system environment.
Apache: Acts as the web server.
MySQL: Handles the database management.
PHP: Processes server-side scripting.

This project will showcase how to:
Create Kubernetes YAML manifest files for deploying LAMP components as separate containers.
Manage deployments, pods, and services with kubectl.
Test the setup to ensure seamless integration.

Prerequisites
Basic knowledge of Kubernetes and Docker.
Kubernetes CLI (kubectl) installed.
A Kubernetes cluster (local: Minikube/kind or cloud: GKE, AKS, EKS).
Docker installed on your local machine.
Helm installed (optional, for package management).

Folder Structure
lamp-kubernetes/
|-- manifests/
|   |-- apache-deployment.yaml
|   |-- mysql-deployment.yaml
|   |-- php-deployment.yaml
|   |-- apache-service.yaml
|   |-- mysql-service.yaml
|   |-- php-service.yaml
|-- README.md

mkdir lamp-kubernetes && cd lamp-kubernetes
mkdir manifests
touch manifests/{apache-deployment.yaml,mysql-deployment.yaml,php-deployment.yaml,apache-service.yaml,mysql-service.yaml,php-service.yaml}

Key Tasks
1. Explain the Architecture
Pod Architecture: Each component (Apache, MySQL, PHP) will run in its own pod for better scalability and isolation.
Service: Services will expose the pods for intercommunication and external access.
Persistent Volumes: MySQL will use a PersistentVolume to store data persistently.
We'll deploy Apache, MySQL, and PHP as individual services in Kubernetes. Apache will serve as our web server, MySQL will act as the database, and PHP will handle server-side processing

2. Create YAML Manifest Files for the Stack
Apache Deployment and Service
# apache-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apache-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: apache
  template:
    metadata:
      labels:
        app: apache
    spec:
      containers:
      - name: apache
        image: httpd:latest
        ports:
        - containerPort: 80

# apache-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: apache-service
spec:
  selector:
    app: apache
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer


MySQL Deployment and Service

# mysql-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: abc123
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

# mysql-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306

PHP Deployment and Service

# php-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: php-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: php
  template:
    metadata:
      labels:
        app: php
    spec:
      containers:
      - name: php
        image: php:7.4-apache
        ports:
        - containerPort: 80

# php-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: php-service
spec:
  selector:
    app: php
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

3. Create a Kubernetes Cluster (Local/Cloud)
Local Cluster

Using Minikube:

minikube start

# Start Minikube
minikube start --driver=docker

# Verify the cluster
kubectl get nodes

Cloud Cluster
Using GKE:
gcloud container clusters create lamp-cluster --num-nodes=3

4. Deploy the Application and Services onto the Cluster
kubectl apply -f manifests/

5. Perform Deployment, Nodes, Pods, Services Management Using kubectl
List all pods:

kubectl get pods
List all services:
kubectl get services
Check the deployment status:
kubectl rollout status deployment/apache-deployment
Common Commands:
# View deployment status
kubectl describe deployment apache

# Scale a deployment
kubectl scale deployment apache --replicas=3

# View logs
kubectl logs <apache-pod-name>

# Restart a pod
kubectl rollout restart deployment apache

6. Test the Application Stack
***Access the Apache service:***
minikube service apache-service
minikube service apache-service --url
"Open this URL in your browser to confirm that Apache is running."
or note the external IP if using a cloud provider.

***Test the PHP functionality via the Apache service:***
Create a phpinfo.php file to verify PHP functionality:

kubectl exec -it <apache-pod-name> -- /bin/bash -c "echo '<?php phpinfo(); ?>' > /usr/local/apache2/htdocs/phpinfo.php"
2. Open the following URL in your browser:
http://<apache-service-external-ip>/phpinfo.php
3. Ensure the PHP information page loads correctly.

***Verify MySQL connectivity by accessing the MySQL pod:***
kubectl exec -it <mysql-pod-name> -- mysql -u root -p

7. Clean Up
To clean up resources:
kubectl delete -f manifests/
For Minikube:
minikube delete
For cloud clusters:
gcloud container clusters delete lamp-cluster
